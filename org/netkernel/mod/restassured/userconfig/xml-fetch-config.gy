import org.netkernel.layer0.nkf.INKFRequestContext
import org.netkernel.layer0.representation.IHDSNode

import com.jayway.restassured.config.RestAssuredConfig
import org.netkernel.layer0.representation.impl.HDSBuilder

import static com.jayway.restassured.config.XmlConfig.xmlConfig


/*
/xml-config
    /namespace-aware
    /namespaces
        /namespace
            /prefix
            /uri
        /namespace
            /prefix
            /uri
 */

INKFRequestContext context = context

def pdsId = 'pds:/RESTAssured/xml-config/persist'


def boolean nodeBooleanValue (IHDSNode config, String path, boolean defaultValue)
{
	try { Boolean.parseBoolean (config.getFirstValue (path) as String) } catch (Exception ignored) { defaultValue }
}

IHDSNode xmlConfigHds

try {
	xmlConfigHds = context.source (pdsId, IHDSNode.class)
} catch (Exception ignored) {
	context.delete (pdsId)
	HDSBuilder builder = new HDSBuilder()
	builder.pushNode ("xml-config")
	builder.addNode ("namespace-aware", "false")
	xmlConfigHds = builder.getRoot()
}

if (context.getThisRequest().getRepresentationClass() == IHDSNode.class) {
	context.createResponseFrom (xmlConfigHds)
	return
}

boolean nsAware = nodeBooleanValue (xmlConfigHds, "/xml-config/namespace-aware", false)

// Setup a REST Assured XML configuration.  Start by creating a config object and
// set the namespace-aware flag according to the config file setting.
RestAssuredConfig config = RestAssuredConfig.newConfig().xmlConfig (
	xmlConfig().namespaceAware (nsAware)
)

// Add each namespace binding to the config.  These literate calls return new objects, must re-assign config each time.
xmlConfigHds.getNodes ("namespaces/namespace") each { IHDSNode binding ->
	String prefix = binding.getFirstValue ("prefix") as String
	String uri = binding.getFirstValue ("uri") as String

	config = config.xmlConfig (config.getXmlConfig().declareNamespace (prefix, uri))
}

// The XML config object is returned, for use in REST Assured given() clauses
context.createResponseFrom (config)


